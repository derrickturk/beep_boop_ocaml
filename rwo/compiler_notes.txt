- -principal seems like a nice lint/warning to turn on
- ocamlc -i seems like a better pre-existing "replacement" for what-the-hell-ever they had us install a a chapter or two ago
- -short-paths is probably also nice to have on most of the time
- -dparsetree and -dtypedtree seem fun
- and -dlambda
- and -dinstr
- compilation unit command-line order = execution order (matters if multiple "entry points" / side-effecting top-level exprs)
- "If youâ€™ve never seen assembly language before, then the contents may be rather scary." wooooooooooo
- good, ocamlopt supports -g
- and -p for gprof
- nice to see the name-mangling rules are written down somewhere
- the debug runtime is nice to know about as well
- I like the file extension cheat sheet:

    .ml are source files for compilation unit module implementations.
    .mli are source files for compilation unit module interfaces. If missing, generated from the .ml file.
    .cmi are compiled module interface from a corresponding .mli source file.
    .cmo are compiled bytecode object file of the module implementation.
    .cma are a library of bytecode object files packed into a single file.
    .o are C source files that have been compiled into native object files by the system cc.
    .cmt are the typed abstract syntax tree for module implementations.
    .cmti are the typed abstract syntax tree for module interfaces.
    .annot are old-style annotation file for displaying typed, superseded by cmt files.

The native code compiler also generates some additional files.

    .o are compiled native object files of the module implementation.
    .cmx contains extra information for linking and cross-module optimization of the object file.
    .cmxa and .a are libraries of cmx and o units, stored in the cmxa and a files respectively. These files are always needed together.
    .S or .s are the assembly language output if -S is specified.

